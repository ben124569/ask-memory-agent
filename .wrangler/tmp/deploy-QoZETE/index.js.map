{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourceRoot": "/Users/benjaminmerritt/Code/MCP/clean-memory-server/.wrangler/tmp/deploy-QoZETE",
  "sourcesContent": ["// Cloudflare Worker for Ask Memory Agent\nexport default {\n  async fetch(request, env, ctx) {\n    // Handle CORS\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n        },\n      });\n    }\n\n    const url = new URL(request.url);\n    \n    // Health check\n    if (url.pathname === '/health') {\n      return Response.json({\n        status: 'healthy',\n        openai: env.OPENAI_API_KEY ? 'connected' : 'not configured',\n        neo4j: env.NEO4J_URI ? 'configured' : 'not configured',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Root endpoint\n    if (url.pathname === '/') {\n      return Response.json({\n        name: 'Ask Memory Agent',\n        version: '1.0.0',\n        type: 'mcp',\n        endpoint: '/mcp'\n      });\n    }\n\n    // MCP endpoint\n    if (url.pathname === '/mcp' && request.method === 'POST') {\n      try {\n        const body = await request.json();\n        const response = await handleMCP(body, env);\n        \n        return Response.json(response, {\n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Content-Type': 'application/json',\n          },\n        });\n      } catch (error) {\n        return Response.json({\n          jsonrpc: '2.0',\n          error: { code: -32603, message: error.message },\n          id: null\n        }, { status: 500 });\n      }\n    }\n\n    return new Response('Not Found', { status: 404 });\n  },\n};\n\nasync function handleMCP(body, env) {\n  const { method, params = {}, id } = body;\n\n  if (method === 'initialize') {\n    return {\n      jsonrpc: '2.0',\n      result: {\n        protocolVersion: '0.1.0',\n        capabilities: { tools: {}, prompts: {} }\n      },\n      id\n    };\n  }\n\n  if (method === 'tools/list') {\n    return {\n      jsonrpc: '2.0',\n      result: {\n        tools: [\n          {\n            name: 'ask_memory',\n            description: 'Ask intelligent questions about your stored memory using ChatGPT analysis',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                question: {\n                  type: 'string',\n                  description: 'Question about your memory, projects, people, etc.'\n                }\n              },\n              required: ['question']\n            }\n          },\n          {\n            name: 'store_memory',\n            description: 'Store new information in your memory',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                key: {\n                  type: 'string',\n                  description: 'Key to store the information under'\n                },\n                value: {\n                  type: 'string',\n                  description: 'Information to store'\n                }\n              },\n              required: ['key', 'value']\n            }\n          },\n          {\n            name: 'search_memory',\n            description: 'Search stored memories',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                query: {\n                  type: 'string',\n                  description: 'Search term'\n                }\n              },\n              required: ['query']\n            }\n          }\n        ]\n      },\n      id\n    };\n  }\n\n  if (method === 'tools/call') {\n    const { name, arguments: args = {} } = params;\n\n    if (name === 'ask_memory') {\n      const question = args.question || '';\n      const response = await askMemoryWithAI(question, env);\n      \n      return {\n        jsonrpc: '2.0',\n        result: {\n          content: [{ type: 'text', text: response }]\n        },\n        id\n      };\n    }\n\n    if (name === 'store_memory') {\n      const { key, value } = args;\n      if (!key || !value) {\n        return {\n          jsonrpc: '2.0',\n          result: {\n            content: [{ type: 'text', text: '\u274C Both key and value are required' }]\n          },\n          id\n        };\n      }\n      \n      await env.MEMORY_KV.put(key, value);\n      \n      return {\n        jsonrpc: '2.0',\n        result: {\n          content: [{ type: 'text', text: `\u2705 Stored memory: ${key}` }]\n        },\n        id\n      };\n    }\n\n    if (name === 'search_memory') {\n      const query = args.query || '';\n      const results = await searchMemories(query, env);\n      \n      return {\n        jsonrpc: '2.0',\n        result: {\n          content: [{ type: 'text', text: results }]\n        },\n        id\n      };\n    }\n\n    return {\n      jsonrpc: '2.0',\n      error: { code: -32601, message: `Unknown tool: ${name}` },\n      id\n    };\n  }\n\n  return {\n    jsonrpc: '2.0',\n    error: { code: -32601, message: `Unknown method: ${method}` },\n    id\n  };\n}\n\nasync function askMemoryWithAI(question, env) {\n  if (!question.trim()) {\n    return '\u2753 Please ask a question about your memory.';\n  }\n\n  // First, search existing memories\n  const searchResults = await searchMemories(question, env);\n  \n  // Use OpenAI to provide intelligent response\n  const prompt = `\nYou are a helpful memory assistant. The user asked: \"${question}\"\n\nHere's what I found in their stored memories:\n${searchResults}\n\nProvide a helpful, conversational response. If no relevant memories were found, suggest what kind of information would be useful to store about this topic.\n  `;\n\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${env.OPENAI_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: env.OPENAI_MODEL || 'gpt-5',\n        messages: [{ role: 'user', content: prompt }],\n        max_tokens: 500,\n        temperature: 0.7,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenAI API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return `\uD83E\uDDE0 **Memory Query**: \"${question}\"\\n\\n\uD83D\uDCDD **Response**: ${data.choices[0].message.content.trim()}`;\n  } catch (error) {\n    return `\uD83E\uDDE0 **Memory Query**: \"${question}\"\\n\\n\u274C **AI Error**: ${error.message}\\n\\n\uD83D\uDCCB **Found memories**: ${searchResults}`;\n  }\n}\n\nasync function searchMemories(query, env) {\n  try {\n    const list = await env.MEMORY_KV.list();\n    const results = [];\n    \n    for (const key of list.keys) {\n      const value = await env.MEMORY_KV.get(key.name);\n      if (value && (\n        key.name.toLowerCase().includes(query.toLowerCase()) ||\n        value.toLowerCase().includes(query.toLowerCase())\n      )) {\n        results.push(`\u2022 ${key.name}: ${value}`);\n      }\n    }\n    \n    if (results.length === 0) {\n      return `No memories found matching \"${query}\"`;\n    }\n    \n    return `Found ${results.length} memories:\\n${results.join('\\n')}`;\n  } catch (error) {\n    return `Search error: ${error.message}`;\n  }\n}"],
  "mappings": "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",
  "names": []
}
